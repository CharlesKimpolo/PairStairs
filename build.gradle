version = '1.0'

apply plugin: 'jetty'

sourceCompatibility = 1.6

// Library Versions
project.ext {
    commonsDbcpVersion = '+'
    freemarkerVersion = '+'
    h2dbversion = '+'
    hibernateCoreVersion = '+'
    hibernateAnnotationsVersion = '+'

    hibernateValidatorVersion = '+'
    javassistVersion = '+'
    jerseyVersion = '+'
    junitVersion = '+'
    liquibaseVersion = '+'

    mockitoVersion = '+'
    slf4jVersion = '+'
    seleniumVersion = '+'
    servletApiVersion = '+'
    springVersion = '+'
}

repositories {
    mavenLocal()

    mavenCentral()
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/unit/java']
        }
    }
    integration {
        java {
            srcDirs = ['src/test/integration/java']
        }
        compileClasspath = sourceSets.main.output + sourceSets.integration.compileClasspath
    }
    functional {
        java {
            srcDirs = ['src/test/functional/java']
        }
    }
}

configurations {
    integrationCompile { extendsFrom compile }
    integrationRuntime { extendsFrom integrationCompile, runtime }
}

dependencies {

    /* DB */
    compile "com.h2database:h2:$project.h2dbversion" // A tool that helps to access a database using a browser.
    compile "commons-dbcp:commons-dbcp:$project.commonsDbcpVersion" //Database Connection Pool of a set of commands (API)
    compile "org.hibernate:hibernate-core:$project.hibernateCoreVersion" // Hibernate facilitates the storage and retrieval
                                                                         // of Java domain objects
   compile "org.hibernate:hibernate-validator:$project.hibernateValidatorVersion" // Is a reference implementation of
                                                                 //                 Bean Validation
                                                            // (defines a metadata model and API for JavaBean validation)
    compile "javassist:javassist:$project.javassistVersion"  // Is a library for editing bytecodes in Java.
    compile "org.springframework:spring-orm:$project.springVersion" // Spring is the most popular application development
                                                                    // framework for enterprise Java.
                                                 // It supports integration with Hibernate, Java Persistence API (JPA).
                                                 // ORM = Object Relational Mapping
    compile "org.springframework:spring-jdbc:$project.springVersion" // JDBC = Java Database Connectivity

   compile "org.liquibase:liquibase-core:$project.liquibaseVersion" //A Database refactoring tool that allows database
                                                     //               structures to be defined in XML.

    /* Web */
    compile "org.springframework:spring-webmvc:$project.springVersion"// webmvc = web model-view-controller is designed
                                                      // around a DispatcherServlet that dispatches requests to handlers

    compile "javax.servlet:javax.servlet-api:$project.servletApiVersion"
    compile "org.freemarker:freemarker:$project.freemarkerVersion"

    compile "com.sun.jersey:jersey-core:$project.jerseyVersion" // Provides support for HTTP headers.
    compile "com.sun.jersey:jersey-server:$project.jerseyVersion" // Provides support for
    compile "com.sun.jersey:jersey-json:$project.jerseyVersion" // Provides support fojunitVersionr enabling and configuring JSON


    /* Utilities */
    compile "org.slf4j:slf4j-log4j12:$project.slf4jVersion" // The Simple Logging Facade for Java (SLF4J)
                                    // serves as a simple facade or abstraction for various logging frameworks,
                                    //  e.g. java.util.logging
    compile "org.slf4j:jcl-over-slf4j:$project.slf4jVersion" // Will allow us to redirect log4j and respectively
                                                            // java.util.logging calls to SLF4
    compile "org.slf4j:jul-to-slf4j:$project.slf4jVersion" // similar to above
    compile "org.springframework:spring-context:$project.springVersion" // Dependency Injection (DI)/Inversion of Control (IoC) container
                                                                        //

    /* Unit Test Only */
    testCompile "junit:junit:$project.junitVersion" // A testing framework for Java
    testCompile "org.mockito:mockito-all:$project.mockitoVersion" // Mockito is a mocking framework that helps to write
                                                                 // tests with clean & simple API
    /* Integration Test Only */
    integrationCompile "junit:junit:$project.junitVersion" // A programmer-oriented testing framework for Java
    integrationCompile "org.springframework:spring-test:$project.springVersion" // The Spring Framework that provides
                                                                                // support for integration testing

    /* Functional Test Only */
    functionalCompile "junit:junit:$project.junitVersion" // A programmer-oriented testing framework for Java
    functionalCompile "org.seleniumhq.selenium:selenium-java:$project.seleniumVersion" // A most widely used source tool
                                                    // available for assisting with the development of test automation
}
task jettyDaemon(type: org.gradle.api.plugins.jetty.JettyRun) {
    daemon = true
}


jettyRun {
  contextPath = 'pair-stairs'
}


test {
    testReportDir = file('build/reports/tests/unit')
    testResultsDir = file('build/results/tests/unit')
}

task integration(type: Test, dependsOn: test) {
    description = 'Runs the integration tests'
    group = 'Verification'
    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.main.runtimeClasspath + sourceSets.integration.runtimeClasspath
    testReportDir = file('build/reports/tests/integration')
    testResultsDir = file('build/results/tests/integration')
}
check.dependsOn integration

task functional(type: Test, dependsOn: jettyDaemon) {
    description = 'Runs the functional tests'
    group = 'Verification'
    testClassesDir = sourceSets.functional.output.classesDir
    classpath = sourceSets.functional.runtimeClasspath
    testReportDir = file('build/reports/tests/functional')
    testResultsDir = file('build/results/tests/funtional')
}
check.dependsOn functional

task compile(dependsOn: [compileJava, compileTestJava, compileIntegrationJava, compileFunctionalJava])
task flattenMainJars(type:Copy, dependsOn: compile) { into 'lib/main' from configurations.compile }
task flattenTestUnitJars(type:Copy) { into 'lib/test/unit' from configurations.testCompile - configurations.compile}
task flattenTestIntegrationJars(type:Copy) { into 'lib/test/integration' from configurations.integrationCompile - configurations.compile }
task flattenTestFunctionalJars(type:Copy) { into 'lib/test/functional' from configurations.functionalCompile - configurations.compile }
task ideaLibs(dependsOn: [flattenMainJars, flattenTestUnitJars, flattenTestIntegrationJars, flattenTestFunctionalJars]) {
    description = 'Create flat lib dir to make dependencies in IntelliJ easier: use "gradle cleanIdeaLibs ideaLibs" to recreate'
    outputs.dir 'lib'
}

task precommit(dependsOn: [clean, test, integration, functional]) {
    description = 'Build to use for before making a commit'
    group = 'Verification'
}
